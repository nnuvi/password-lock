/**
 * I2C LCD Library for STM32
 * Object-oriented version with multiple LCD support
 */

#include "lcd_i2c.h"

/**
 * @brief  Sends a command to the LCD.
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
}

/**
 * @brief  Sends data (character) to the LCD.
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
}

/**
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
    lcd_send_cmd(lcd, 0x01);  // Clear display command
    HAL_Delay(2);             // Delay needed after clear command
}


/**
 * @brief  Moves the cursor to a specific position on the LCD.
 * @param  lcd: Pointer to the LCD handle
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
    uint8_t address;

    switch (row)
    {
        case 0: address = 0x80 + col; break;  // First row
        case 1: address = 0xC0 + col; break;  // Second row
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);
}


/**
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
    HAL_Delay(50);  // Wait for LCD power-up
    lcd_send_cmd(lcd, 0x30);  // Wake up command
    HAL_Delay(10);
    lcd_send_cmd(lcd, 0x30);  // Wake up command
    HAL_Delay(5);
    lcd_send_cmd(lcd, 0x30);  // Wake up command
    HAL_Delay(10);
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
    HAL_Delay(10);

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
    HAL_Delay(10);
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
    HAL_Delay(10);
    lcd_send_cmd(lcd, 0x01);  // Clear display
    HAL_Delay(20);
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
    HAL_Delay(10);
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
}

/**
 * @brief  Sends a string to the LCD.
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
}

/**
 * @brief  Sends a single character to the LCD.
 * @param  lcd: Pointer to the LCD handle
 * @param  ch: Character to send
 * @retval None
 */
void lcd_putchar(I2C_LCD_HandleTypeDef *lcd, char ch)
{
    lcd_send_data(lcd, ch);  // Send the character to the display
}







//#include "main.h"
//#include "string.h"
//#include "stdlib.h"
//#include "lcd_i2c.h"
//
//
//#include "stm32f1xx_hal.h"
//
//extern I2C_HandleTypeDef hi2c1;
//
//#define SLAVE_ADDRESS_LCD (0x27 << 1)  // Usually 0x4E or 0x27 << 1
//
//void lcd_send_cmd(char cmd) {
//    char data_u, data_l;
//    uint8_t data_t[4];
//
//    data_u = (cmd & 0xf0);
//    data_l = ((cmd << 4) & 0xf0);
//    data_t[0] = data_u | 0x0C;  // en=1, rs=0
//    data_t[1] = data_u | 0x08;  // en=0, rs=0
//    data_t[2] = data_l | 0x0C;  // en=1, rs=0
//    data_t[3] = data_l | 0x08;  // en=0, rs=0
//
//    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
//}
//
//void lcd_send_data(char data) {
//    char data_u, data_l;
//    uint8_t data_t[4];
//
//    data_u = (data & 0xf0);
//    data_l = ((data << 4) & 0xf0);
//    data_t[0] = data_u | 0x0D;  // en=1, rs=1
//    data_t[1] = data_u | 0x09;  // en=0, rs=1
//    data_t[2] = data_l | 0x0D;  // en=1, rs=1
//    data_t[3] = data_l | 0x09;  // en=0, rs=1
//
//    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
//}
//
//void lcd_init(void) {
//    HAL_Delay(50);
//    lcd_send_cmd(0x30);
//    HAL_Delay(5);
//    lcd_send_cmd(0x30);
//    HAL_Delay(1);
//    lcd_send_cmd(0x30);
//
//    lcd_send_cmd(0x20);  // 4-bit mode
//    HAL_Delay(1);
//
//    lcd_send_cmd(0x28);  // 2 line, 5x7 matrix
//    HAL_Delay(1);
//    lcd_send_cmd(0x08);  // display off
//    HAL_Delay(1);
//    lcd_send_cmd(0x01);  // clear display
//    HAL_Delay(2);
//    lcd_send_cmd(0x06);  // entry mode
//    HAL_Delay(1);
//    lcd_send_cmd(0x0C);  // display on, cursor off
//}
//
//void lcd_send_string(char *str) {
//    while (*str) {
//        lcd_send_data(*str++);
//    }
//}
//
//void lcd_set_cursor(uint8_t row, uint8_t col) {
//    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
//    lcd_send_cmd(addr);
//}
//
///*
//void lcd_init(void)
//{
//    HAL_Delay(50);  // Wait for the LCD to power up
//
//    // Send initialization commands to LCD (this might vary depending on the LCD library you're using)
//    lcd_send_command(0x33);  // Function set: 8-bit mode
//    lcd_send_command(0x32);  // Function set: 4-bit mode
//    lcd_send_command(0x28);  // Function set: 4-bit, 2-line, 5x8 matrix
//    lcd_send_command(0x0C);  // Display ON, Cursor OFF, Blink OFF
//    lcd_send_command(0x06);  // Entry mode: Increment, no shift
//    lcd_send_command(0x01);  // Clear display
//    HAL_Delay(2);            // Wait for the command to complete
//}
//
//void lcd_send_command(uint8_t command)
//{
//    uint8_t data[2];
//
//    data[0] = (command & 0xF0);  // Send upper nibble
//    data[1] = ((command << 4) & 0xF0);  // Send lower nibble
//
//    // Write command to LCD over I2C (address is 0x27, adjust based on your I2C address)
//    HAL_I2C_Master_Transmit(&hi2c1, 0x4E, data, 2, HAL_MAX_DELAY);  // 0x4E is the I2C address for write
//}
//
//void lcd_send_data(uint8_t data)
//{
//    uint8_t buffer[2];
//
//    buffer[0] = (data & 0xF0);  // Send upper nibble
//    buffer[1] = ((data << 4) & 0xF0);  // Send lower nibble
//
//    // Send data to LCD
//    HAL_I2C_Master_Transmit(&hi2c1, 0x4E, buffer, 2, HAL_MAX_DELAY);  // 0x4E is the I2C address for write
//}
//
//
//void lcd_set_cursor(uint8_t row, uint8_t col)
//{
//    uint8_t position;
//
//    // Calculate position based on row and column
//    if (row == 0)
//        position = 0x80 + col;
//    else if (row == 1)
//        position = 0xC0 + col;
//
//    lcd_send_command(position);  // Set cursor position
//}
//
//void lcd_send_string(char *str)
//{
//    while (*str)
//    {
//        lcd_send_data(*str++);  // Send each character to the LCD
//    }
//}
//*/
//void lcd_clear(void) {
//    lcd_send_cmd(0x01);
//    HAL_Delay(2);
//}
//
