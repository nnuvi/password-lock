
pass_unlock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003080  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800318c  0800318c  0000418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031fc  080031fc  00005044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003204  08003204  00005044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003204  08003204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003208  08003208  00004208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  0800320c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000044  08003250  00005044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003250  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aec7  00000000  00000000  0000506d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  0000ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000119e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c7  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b04  00000000  00000000  0001301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebe9  00000000  00000000  0002ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a497  00000000  00000000  0003970c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003484  00000000  00000000  000c3be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08003174 	.word	0x08003174

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08003174 	.word	0x08003174

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <get_key>:
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

char get_key(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++)
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	e04c      	b.n	8000206 <get_key+0xa6>
    {
        // Set all rows HIGH
        for (int r = 0; r < 4; r++)
 800016c:	2300      	movs	r3, #0
 800016e:	60bb      	str	r3, [r7, #8]
 8000170:	e00c      	b.n	800018c <get_key+0x2c>
        {
            HAL_GPIO_WritePin(ROW_PORT, row_pins[r], GPIO_PIN_SET);
 8000172:	4a29      	ldr	r2, [pc, #164]	@ (8000218 <get_key+0xb8>)
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017a:	b29b      	uxth	r3, r3
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	4826      	ldr	r0, [pc, #152]	@ (800021c <get_key+0xbc>)
 8000182:	f001 f8ae 	bl	80012e2 <HAL_GPIO_WritePin>
        for (int r = 0; r < 4; r++)
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	3301      	adds	r3, #1
 800018a:	60bb      	str	r3, [r7, #8]
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b03      	cmp	r3, #3
 8000190:	ddef      	ble.n	8000172 <get_key+0x12>
        }

        // Pull current row LOW
        HAL_GPIO_WritePin(ROW_PORT, row_pins[row], GPIO_PIN_RESET);
 8000192:	4a21      	ldr	r2, [pc, #132]	@ (8000218 <get_key+0xb8>)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800019a:	b29b      	uxth	r3, r3
 800019c:	2200      	movs	r2, #0
 800019e:	4619      	mov	r1, r3
 80001a0:	481e      	ldr	r0, [pc, #120]	@ (800021c <get_key+0xbc>)
 80001a2:	f001 f89e 	bl	80012e2 <HAL_GPIO_WritePin>

        // Scan columns
        for (int col = 0; col < 4; col++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e026      	b.n	80001fa <get_key+0x9a>
        {
            if (HAL_GPIO_ReadPin(COL_PORT, col_pins[col]) == GPIO_PIN_RESET)
 80001ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000220 <get_key+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	b29b      	uxth	r3, r3
 80001b6:	4619      	mov	r1, r3
 80001b8:	4818      	ldr	r0, [pc, #96]	@ (800021c <get_key+0xbc>)
 80001ba:	f001 f87b 	bl	80012b4 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d117      	bne.n	80001f4 <get_key+0x94>
            {
                HAL_Delay(200); // debounce
 80001c4:	20c8      	movs	r0, #200	@ 0xc8
 80001c6:	f000 fde9 	bl	8000d9c <HAL_Delay>
                while (HAL_GPIO_ReadPin(COL_PORT, col_pins[col]) == GPIO_PIN_RESET); // wait for release
 80001ca:	bf00      	nop
 80001cc:	4a14      	ldr	r2, [pc, #80]	@ (8000220 <get_key+0xc0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4810      	ldr	r0, [pc, #64]	@ (800021c <get_key+0xbc>)
 80001da:	f001 f86b 	bl	80012b4 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f3      	beq.n	80001cc <get_key+0x6c>
                return keymap[row][col];
 80001e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <get_key+0xc4>)
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	441a      	add	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	e00c      	b.n	800020e <get_key+0xae>
        for (int col = 0; col < 4; col++)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	ddd5      	ble.n	80001ac <get_key+0x4c>
    for (int row = 0; row < 4; row++)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	3301      	adds	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b03      	cmp	r3, #3
 800020a:	ddaf      	ble.n	800016c <get_key+0xc>
            }
        }
    }
    return 0;
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000000 	.word	0x20000000
 800021c:	40010800 	.word	0x40010800
 8000220:	20000010 	.word	0x20000010
 8000224:	20000020 	.word	0x20000020

08000228 <lcd_send_cmd>:
#include "string.h"
#include "stdlib.h"
#include "lcd_i2c.h"

void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af02      	add	r7, sp, #8
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	460b      	mov	r3, r1
 8000232:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	f023 030f 	bic.w	r3, r3, #15
 800023a:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	011b      	lsls	r3, r3, #4
 8000240:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	f043 030c 	orr.w	r3, r3, #12
 8000248:	b2db      	uxtb	r3, r3
 800024a:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	b2db      	uxtb	r3, r3
 8000254:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	f043 030c 	orr.w	r3, r3, #12
 800025c:	b2db      	uxtb	r3, r3
 800025e:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	791b      	ldrb	r3, [r3, #4]
 8000272:	4619      	mov	r1, r3
 8000274:	f107 0208 	add.w	r2, r7, #8
 8000278:	2364      	movs	r3, #100	@ 0x64
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2304      	movs	r3, #4
 800027e:	f001 f9c7 	bl	8001610 <HAL_I2C_Master_Transmit>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <lcd_send_data>:

void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b086      	sub	sp, #24
 800028e:	af02      	add	r7, sp, #8
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	460b      	mov	r3, r1
 8000294:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000296:	78fb      	ldrb	r3, [r7, #3]
 8000298:	f023 030f 	bic.w	r3, r3, #15
 800029c:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 800029e:	78fb      	ldrb	r3, [r7, #3]
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	f043 030d 	orr.w	r3, r3, #13
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	f043 0309 	orr.w	r3, r3, #9
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80002b8:	7bbb      	ldrb	r3, [r7, #14]
 80002ba:	f043 030d 	orr.w	r3, r3, #13
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80002c2:	7bbb      	ldrb	r3, [r7, #14]
 80002c4:	f043 0309 	orr.w	r3, r3, #9
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f107 0208 	add.w	r2, r7, #8
 80002da:	2364      	movs	r3, #100	@ 0x64
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2304      	movs	r3, #4
 80002e0:	f001 f996 	bl	8001610 <HAL_I2C_Master_Transmit>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <lcd_clear>:

void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x01);  // Clear display command
 80002f4:	2101      	movs	r1, #1
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ff96 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(2);             // Delay needed after clear command
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 fd4d 	bl	8000d9c <HAL_Delay>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <lcd_gotoxy>:

void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d003      	beq.n	8000324 <lcd_gotoxy+0x1a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d005      	beq.n	800032e <lcd_gotoxy+0x24>
    {
        case 0: address = 0x80 + col; break;  // First row
        case 1: address = 0xC0 + col; break;  // Second row
        default: return;  // Ignore invalid row numbers
 8000322:	e00e      	b.n	8000342 <lcd_gotoxy+0x38>
        case 0: address = 0x80 + col; break;  // First row
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	3b80      	subs	r3, #128	@ 0x80
 800032a:	75fb      	strb	r3, [r7, #23]
 800032c:	e004      	b.n	8000338 <lcd_gotoxy+0x2e>
        case 1: address = 0xC0 + col; break;  // Second row
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	3b40      	subs	r3, #64	@ 0x40
 8000334:	75fb      	strb	r3, [r7, #23]
 8000336:	bf00      	nop
    }

    lcd_send_cmd(lcd, address);
 8000338:	7dfb      	ldrb	r3, [r7, #23]
 800033a:	4619      	mov	r1, r3
 800033c:	68f8      	ldr	r0, [r7, #12]
 800033e:	f7ff ff73 	bl	8000228 <lcd_send_cmd>
}
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lcd_init>:

void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000350:	2032      	movs	r0, #50	@ 0x32
 8000352:	f000 fd23 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000356:	2130      	movs	r1, #48	@ 0x30
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff65 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 800035e:	200a      	movs	r0, #10
 8000360:	f000 fd1c 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000364:	2130      	movs	r1, #48	@ 0x30
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f7ff ff5e 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 800036c:	200a      	movs	r0, #10
 800036e:	f000 fd15 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000372:	2130      	movs	r1, #48	@ 0x30
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f7ff ff57 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 800037a:	200a      	movs	r0, #10
 800037c:	f000 fd0e 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000380:	2120      	movs	r1, #32
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff50 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f000 fd07 	bl	8000d9c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800038e:	2128      	movs	r1, #40	@ 0x28
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ff49 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 8000396:	200a      	movs	r0, #10
 8000398:	f000 fd00 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800039c:	2108      	movs	r1, #8
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f7ff ff42 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 80003a4:	200a      	movs	r0, #10
 80003a6:	f000 fcf9 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80003aa:	2101      	movs	r1, #1
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff3b 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(20);
 80003b2:	2014      	movs	r0, #20
 80003b4:	f000 fcf2 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80003b8:	2106      	movs	r1, #6
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff34 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);
 80003c0:	200a      	movs	r0, #10
 80003c2:	f000 fceb 	bl	8000d9c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80003c6:	210c      	movs	r1, #12
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff2d 	bl	8000228 <lcd_send_cmd>
    HAL_Delay(10);  // Wait before proceeding
 80003ce:	200a      	movs	r0, #10
 80003d0:	f000 fce4 	bl	8000d9c <HAL_Delay>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <lcd_puts>:

void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80003e6:	e007      	b.n	80003f8 <lcd_puts+0x1c>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	603a      	str	r2, [r7, #0]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ff49 	bl	800028a <lcd_send_data>
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d1f3      	bne.n	80003e8 <lcd_puts+0xc>
    HAL_Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fccb 	bl	8000d9c <HAL_Delay>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <lcd_putchar>:

void lcd_putchar(I2C_LCD_HandleTypeDef *lcd, char ch)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	460b      	mov	r3, r1
 8000418:	70fb      	strb	r3, [r7, #3]
    lcd_send_data(lcd, ch);  // Send the character to the display
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	4619      	mov	r1, r3
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ff33 	bl	800028a <lcd_send_data>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <moveServo>:
#define PASSWORD_LENGTH 4
char correctPassword[] = "1234";
char enteredPassword[PASSWORD_LENGTH + 1] = "";
uint8_t passwordIndex = 0;

void moveServo(uint16_t pulseWidth) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
		    // Move Servo to 90 degree
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000436:	2104      	movs	r1, #4
 8000438:	4809      	ldr	r0, [pc, #36]	@ (8000460 <moveServo+0x34>)
 800043a:	f002 f8e5 	bl	8002608 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulseWidth);
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <moveServo+0x34>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	88fa      	ldrh	r2, [r7, #6]
 8000444:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(300);
 8000446:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800044a:	f000 fca7 	bl	8000d9c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800044e:	2104      	movs	r1, #4
 8000450:	4803      	ldr	r0, [pc, #12]	@ (8000460 <moveServo+0x34>)
 8000452:	f002 f97b 	bl	800274c <HAL_TIM_PWM_Stop>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000b4 	.word	0x200000b4

08000464 <ringBuzzer>:

void ringBuzzer(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  for (int i = 0; i < 3; i++)  // Ring 3 times
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e016      	b.n	800049e <ringBuzzer+0x3a>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // Buzzer ON
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000476:	480e      	ldr	r0, [pc, #56]	@ (80004b0 <ringBuzzer+0x4c>)
 8000478:	f000 ff33 	bl	80012e2 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000480:	f000 fc8c 	bl	8000d9c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Buzzer OFF
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800048a:	4809      	ldr	r0, [pc, #36]	@ (80004b0 <ringBuzzer+0x4c>)
 800048c:	f000 ff29 	bl	80012e2 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000494:	f000 fc82 	bl	8000d9c <HAL_Delay>
  for (int i = 0; i < 3; i++)  // Ring 3 times
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	dde5      	ble.n	8000470 <ringBuzzer+0xc>
  }
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <main>:

int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
    // Initialize
    HAL_Init();
 80004ba:	f000 fc0d 	bl	8000cd8 <HAL_Init>
    SystemClock_Config();
 80004be:	f000 f8df 	bl	8000680 <SystemClock_Config>
    MX_GPIO_Init();
 80004c2:	f000 f9f9 	bl	80008b8 <MX_GPIO_Init>
    MX_I2C1_Init();
 80004c6:	f000 f917 	bl	80006f8 <MX_I2C1_Init>
    MX_TIM1_Init();
 80004ca:	f000 f955 	bl	8000778 <MX_TIM1_Init>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
//    /* USER CODE END 2 */

    // Start Servo PWM

    HAL_Delay(1000);
 80004ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004d2:	f000 fc63 	bl	8000d9c <HAL_Delay>

    lcd.hi2c = &hi2c1;
 80004d6:	4b60      	ldr	r3, [pc, #384]	@ (8000658 <main+0x1a4>)
 80004d8:	4a60      	ldr	r2, [pc, #384]	@ (800065c <main+0x1a8>)
 80004da:	601a      	str	r2, [r3, #0]
    lcd.address = 0x27 << 1;
 80004dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000658 <main+0x1a4>)
 80004de:	224e      	movs	r2, #78	@ 0x4e
 80004e0:	711a      	strb	r2, [r3, #4]

    HAL_Delay(1000);
 80004e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e6:	f000 fc59 	bl	8000d9c <HAL_Delay>
    lcd_init(&lcd);
 80004ea:	485b      	ldr	r0, [pc, #364]	@ (8000658 <main+0x1a4>)
 80004ec:	f7ff ff2c 	bl	8000348 <lcd_init>
    lcd_gotoxy(&lcd, 0, 0); // Go to first row, first column
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	4858      	ldr	r0, [pc, #352]	@ (8000658 <main+0x1a4>)
 80004f6:	f7ff ff08 	bl	800030a <lcd_gotoxy>
    HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004fe:	f000 fc4d 	bl	8000d9c <HAL_Delay>
    lcd_puts(&lcd, "Enter Password"); // Print message
 8000502:	4957      	ldr	r1, [pc, #348]	@ (8000660 <main+0x1ac>)
 8000504:	4854      	ldr	r0, [pc, #336]	@ (8000658 <main+0x1a4>)
 8000506:	f7ff ff69 	bl	80003dc <lcd_puts>
    HAL_Delay(3000);
 800050a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800050e:	f000 fc45 	bl	8000d9c <HAL_Delay>

  while (1)
  {
	  HAL_Delay(3000);
 8000512:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000516:	f000 fc41 	bl	8000d9c <HAL_Delay>
	  lcd_gotoxy(&lcd, 0, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2100      	movs	r1, #0
 800051e:	484e      	ldr	r0, [pc, #312]	@ (8000658 <main+0x1a4>)
 8000520:	f7ff fef3 	bl	800030a <lcd_gotoxy>
	  lcd_send_cmd(&lcd, 0x0F);
 8000524:	210f      	movs	r1, #15
 8000526:	484c      	ldr	r0, [pc, #304]	@ (8000658 <main+0x1a4>)
 8000528:	f7ff fe7e 	bl	8000228 <lcd_send_cmd>
	  HAL_Delay(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000530:	f000 fc34 	bl	8000d9c <HAL_Delay>
	  //char key = Keys_Detect();
	  char key = get_key();
 8000534:	f7ff fe14 	bl	8000160 <get_key>
 8000538:	4603      	mov	r3, r0
 800053a:	71fb      	strb	r3, [r7, #7]
	  if (key != '\0' && passwordIndex < 4) {
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0e7      	beq.n	8000512 <main+0x5e>
 8000542:	4b48      	ldr	r3, [pc, #288]	@ (8000664 <main+0x1b0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d8e3      	bhi.n	8000512 <main+0x5e>
          lcd_gotoxy(&lcd, 0, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	2100      	movs	r1, #0
 800054e:	4842      	ldr	r0, [pc, #264]	@ (8000658 <main+0x1a4>)
 8000550:	f7ff fedb 	bl	800030a <lcd_gotoxy>
          lcd_putchar(&lcd, key);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4619      	mov	r1, r3
 8000558:	483f      	ldr	r0, [pc, #252]	@ (8000658 <main+0x1a4>)
 800055a:	f7ff ff58 	bl	800040e <lcd_putchar>
		          enteredPassword[passwordIndex++] = key;  // Save key
 800055e:	4b41      	ldr	r3, [pc, #260]	@ (8000664 <main+0x1b0>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	b2d1      	uxtb	r1, r2
 8000566:	4a3f      	ldr	r2, [pc, #252]	@ (8000664 <main+0x1b0>)
 8000568:	7011      	strb	r1, [r2, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4a3e      	ldr	r2, [pc, #248]	@ (8000668 <main+0x1b4>)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	5453      	strb	r3, [r2, r1]
		          //enteredPassword[passwordIndex] = '\0';          // Null-terminate
//
//		  	      if (key && passwordIndex < PASSWORD_LENGTH) {
//		  	        enteredPassword[passwordIndex++] = key;
//		  	        enteredPassword[passwordIndex] = '\0';
		          if (passwordIndex == 4) {
 8000572:	4b3c      	ldr	r3, [pc, #240]	@ (8000664 <main+0x1b0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d1cb      	bne.n	8000512 <main+0x5e>
		        	  enteredPassword[4] = '\0';
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <main+0x1b4>)
 800057c:	2200      	movs	r2, #0
 800057e:	711a      	strb	r2, [r3, #4]
		          		  	        HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000584:	f000 fc0a 	bl	8000d9c <HAL_Delay>
		          		  	        if (strcmp(enteredPassword, correctPassword) == 0) {
 8000588:	4938      	ldr	r1, [pc, #224]	@ (800066c <main+0x1b8>)
 800058a:	4837      	ldr	r0, [pc, #220]	@ (8000668 <main+0x1b4>)
 800058c:	f7ff fdde 	bl	800014c <strcmp>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d127      	bne.n	80005e6 <main+0x132>
		          		  	          lcd_clear(&lcd);
 8000596:	4830      	ldr	r0, [pc, #192]	@ (8000658 <main+0x1a4>)
 8000598:	f7ff fea8 	bl	80002ec <lcd_clear>
		          		  	          lcd_gotoxy(&lcd, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	482d      	ldr	r0, [pc, #180]	@ (8000658 <main+0x1a4>)
 80005a2:	f7ff feb2 	bl	800030a <lcd_gotoxy>
		          		  	          lcd_puts(&lcd, "Access Granted");
 80005a6:	4932      	ldr	r1, [pc, #200]	@ (8000670 <main+0x1bc>)
 80005a8:	482b      	ldr	r0, [pc, #172]	@ (8000658 <main+0x1a4>)
 80005aa:	f7ff ff17 	bl	80003dc <lcd_puts>
		          		  	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // Buzzer ON
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005b4:	482f      	ldr	r0, [pc, #188]	@ (8000674 <main+0x1c0>)
 80005b6:	f000 fe94 	bl	80012e2 <HAL_GPIO_WritePin>
		          		  	          HAL_Delay(200);
 80005ba:	20c8      	movs	r0, #200	@ 0xc8
 80005bc:	f000 fbee 	bl	8000d9c <HAL_Delay>
		          		  	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Buzzer OFF
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c6:	482b      	ldr	r0, [pc, #172]	@ (8000674 <main+0x1c0>)
 80005c8:	f000 fe8b 	bl	80012e2 <HAL_GPIO_WritePin>
		          		  	          moveServo(SERVO_180_DEGREE);  // Move to 90 degrees (1.5 ms pulse)
 80005cc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80005d0:	f7ff ff2c 	bl	800042c <moveServo>
		          		  	          HAL_Delay(3000);  // Wait for 3 seconds at 90 degrees
 80005d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005d8:	f000 fbe0 	bl	8000d9c <HAL_Delay>
		          		  	          moveServo(SERVO_0_DEGREE);  // Move back to 0 degrees (1 ms pulse)
 80005dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e0:	f7ff ff24 	bl	800042c <moveServo>
 80005e4:	e01f      	b.n	8000626 <main+0x172>
		          		  	        } else {
		          		  	          lcd_clear(&lcd);
 80005e6:	481c      	ldr	r0, [pc, #112]	@ (8000658 <main+0x1a4>)
 80005e8:	f7ff fe80 	bl	80002ec <lcd_clear>
		          		  	          lcd_gotoxy(&lcd, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	4819      	ldr	r0, [pc, #100]	@ (8000658 <main+0x1a4>)
 80005f2:	f7ff fe8a 	bl	800030a <lcd_gotoxy>
		          		  	          lcd_puts(&lcd, "Wrong Password");
 80005f6:	4920      	ldr	r1, [pc, #128]	@ (8000678 <main+0x1c4>)
 80005f8:	4817      	ldr	r0, [pc, #92]	@ (8000658 <main+0x1a4>)
 80005fa:	f7ff feef 	bl	80003dc <lcd_puts>
		          		  	          ringBuzzer();
 80005fe:	f7ff ff31 	bl	8000464 <ringBuzzer>
		          		  	          moveServo(SERVO_180_DEGREE);  // Move to 90 degrees (1.5 ms pulse)// Wait for 3 seconds at 90 degrees
 8000602:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000606:	f7ff ff11 	bl	800042c <moveServo>
		          		  	          HAL_Delay(3000);  // Wait for 3 seconds at 90 degrees
 800060a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800060e:	f000 fbc5 	bl	8000d9c <HAL_Delay>
		          		  	          moveServo(SERVO_0_DEGREE);  // Move back to 0 degrees (1 ms pulse)
 8000612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000616:	f7ff ff09 	bl	800042c <moveServo>
		          		  	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Buzzer OFF
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000620:	4814      	ldr	r0, [pc, #80]	@ (8000674 <main+0x1c0>)
 8000622:	f000 fe5e 	bl	80012e2 <HAL_GPIO_WritePin>

		          		  	        }
		          		  	        HAL_Delay(2000);
 8000626:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800062a:	f000 fbb7 	bl	8000d9c <HAL_Delay>
		          		  	        lcd_clear(&lcd);
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <main+0x1a4>)
 8000630:	f7ff fe5c 	bl	80002ec <lcd_clear>
		          		  	        lcd_gotoxy(&lcd, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <main+0x1a4>)
 800063a:	f7ff fe66 	bl	800030a <lcd_gotoxy>
		          		  	        lcd_puts(&lcd, "Enter Password...");
 800063e:	490f      	ldr	r1, [pc, #60]	@ (800067c <main+0x1c8>)
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <main+0x1a4>)
 8000642:	f7ff fecb 	bl	80003dc <lcd_puts>
		          		  	        passwordIndex = 0;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <main+0x1b0>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
		          		  	        memset(enteredPassword, 0, sizeof(enteredPassword));
 800064c:	2205      	movs	r2, #5
 800064e:	2100      	movs	r1, #0
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <main+0x1b4>)
 8000652:	f002 fd62 	bl	800311a <memset>
  {
 8000656:	e75c      	b.n	8000512 <main+0x5e>
 8000658:	200000fc 	.word	0x200000fc
 800065c:	20000060 	.word	0x20000060
 8000660:	0800318c 	.word	0x0800318c
 8000664:	20000109 	.word	0x20000109
 8000668:	20000104 	.word	0x20000104
 800066c:	20000030 	.word	0x20000030
 8000670:	0800319c 	.word	0x0800319c
 8000674:	40010c00 	.word	0x40010c00
 8000678:	080031ac 	.word	0x080031ac
 800067c:	080031bc 	.word	0x080031bc

08000680 <SystemClock_Config>:
    return '\0';
}


void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	@ 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	@ 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fd43 	bl	800311a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fb02 	bl	8001cc0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006c2:	f000 f987 	bl	80009d4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fd70 	bl	80021c4 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f973 	bl	80009d4 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	@ 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_I2C1_Init+0x70>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a19      	ldr	r2, [pc, #100]	@ (8000768 <MX_I2C1_Init+0x70>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_I2C1_Init+0x70>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  hi2c1.Instance = I2C1;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_I2C1_Init+0x74>)
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_I2C1_Init+0x78>)
 800071a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_I2C1_Init+0x74>)
 800071e:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_I2C1_Init+0x7c>)
 8000720:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C1_Init+0x74>)
 8000730:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <MX_I2C1_Init+0x74>)
 8000750:	f000 fe1a 	bl	8001388 <HAL_I2C_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 800075a:	f000 f93b 	bl	80009d4 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	20000060 	.word	0x20000060
 8000770:	40005400 	.word	0x40005400
 8000774:	000186a0 	.word	0x000186a0

08000778 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	@ 0x58
 800077c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fcb2 	bl	800311a <memset>

  htim1.Instance = TIM1;
 80007b6:	4b3e      	ldr	r3, [pc, #248]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007b8:	4a3e      	ldr	r2, [pc, #248]	@ (80008b4 <MX_TIM1_Init+0x13c>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007be:	220f      	movs	r2, #15
 80007c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b3b      	ldr	r3, [pc, #236]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80007c8:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b37      	ldr	r3, [pc, #220]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d6:	4b36      	ldr	r3, [pc, #216]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b34      	ldr	r3, [pc, #208]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e2:	4833      	ldr	r0, [pc, #204]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80007e4:	f001 fe68 	bl	80024b8 <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007ee:	f000 f8f1 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007fc:	4619      	mov	r1, r3
 80007fe:	482c      	ldr	r0, [pc, #176]	@ (80008b0 <MX_TIM1_Init+0x138>)
 8000800:	f002 f864 	bl	80028cc <HAL_TIM_ConfigClockSource>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800080a:	f000 f8e3 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800080e:	4828      	ldr	r0, [pc, #160]	@ (80008b0 <MX_TIM1_Init+0x138>)
 8000810:	f001 fea1 	bl	8002556 <HAL_TIM_OC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800081a:	f000 f8db 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000826:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800082a:	4619      	mov	r1, r3
 800082c:	4820      	ldr	r0, [pc, #128]	@ (80008b0 <MX_TIM1_Init+0x138>)
 800082e:	f002 fbc5 	bl	8002fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000838:	f000 f8cc 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	@ 0x60
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4813      	ldr	r0, [pc, #76]	@ (80008b0 <MX_TIM1_Init+0x138>)
 8000862:	f001 ffd7 	bl	8002814 <HAL_TIM_OC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800086c:	f000 f8b2 	bl	80009d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_TIM1_Init+0x138>)
 8000894:	f002 fbf0 	bl	8003078 <HAL_TIMEx_ConfigBreakDeadTime>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800089e:	f000 f899 	bl	80009d4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <MX_TIM1_Init+0x138>)
 80008a4:	f000 f96c 	bl	8000b80 <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3758      	adds	r7, #88	@ 0x58
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000b4 	.word	0x200000b4
 80008b4:	40012c00 	.word	0x40012c00

080008b8 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b3d      	ldr	r3, [pc, #244]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a3c      	ldr	r2, [pc, #240]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b3a      	ldr	r3, [pc, #232]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a36      	ldr	r2, [pc, #216]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b31      	ldr	r3, [pc, #196]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a30      	ldr	r2, [pc, #192]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <MX_GPIO_Init+0x10c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000914:	230f      	movs	r3, #15
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000918:	2311      	movs	r3, #17
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4827      	ldr	r0, [pc, #156]	@ (80009c8 <MX_GPIO_Init+0x110>)
 800092c:	f000 fb3e 	bl	8000fac <HAL_GPIO_Init>

    /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000930:	23f0      	movs	r3, #240	@ 0xf0
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4821      	ldr	r0, [pc, #132]	@ (80009c8 <MX_GPIO_Init+0x110>)
 8000944:	f000 fb32 	bl	8000fac <HAL_GPIO_Init>

  // Configure GPIO : PA8 Servo-motor
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;      // Alternate Function Push-Pull
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // High Speed
 8000956:	2303      	movs	r3, #3
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	4819      	ldr	r0, [pc, #100]	@ (80009c8 <MX_GPIO_Init+0x110>)
 8000962:	f000 fb23 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 Buzzer */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4813      	ldr	r0, [pc, #76]	@ (80009cc <MX_GPIO_Init+0x114>)
 8000980:	f000 fb14 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 PB7 Display */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000984:	23c0      	movs	r3, #192	@ 0xc0
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_GPIO_Init+0x114>)
 8000998:	f000 fb08 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 LED */
  GPIO_InitStruct.Pin = GPIO_PIN_13;      // On-board LED is connected to PC13
 800099c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull mode for output
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;         // No pull-up or pull-down resistors
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed for general use
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <MX_GPIO_Init+0x118>)
 80009b6:	f000 faf9 	bl	8000fac <HAL_GPIO_Init>

//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	40011000 	.word	0x40011000

080009d4 <Error_Handler>:
//  }
//}
/* USER CODE END 4 */

void Error_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Toggle LED to indicate failure
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <Error_Handler+0x20>)
 80009e2:	f000 fc96 	bl	8001312 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ea:	f000 f9d7 	bl	8000d9c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Toggle LED to indicate failure
 80009ee:	bf00      	nop
 80009f0:	e7f4      	b.n	80009dc <Error_Handler+0x8>
 80009f2:	bf00      	nop
 80009f4:	40011000 	.word	0x40011000

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x5c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_MspInit+0x60>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_MspInit+0x60>)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010000 	.word	0x40010000

08000a5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <HAL_I2C_MspInit+0x70>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d123      	bne.n	8000ac4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a13      	ldr	r2, [pc, #76]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	23c0      	movs	r3, #192	@ 0xc0
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <HAL_I2C_MspInit+0x78>)
 8000aa8:	f000 fa80 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	61d3      	str	r3, [r2, #28]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_I2C_MspInit+0x74>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <HAL_TIM_Base_MspInit+0x98>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d136      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000afe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_TIM_Base_MspInit+0x9c>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <HAL_TIM_Base_MspInit+0xa0>)
 8000b3e:	f000 fa35 	bl	8000fac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_TIM_Base_MspInit+0xa4>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <HAL_TIM_Base_MspInit+0xa4>)
 8000b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b64:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010000 	.word	0x40010000

08000b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <HAL_TIM_MspPostInit+0x7c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d129      	bne.n	8000bf4 <HAL_TIM_MspPostInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_TIM_MspPostInit+0x80>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <HAL_TIM_MspPostInit+0x80>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_TIM_MspPostInit+0x80>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480e      	ldr	r0, [pc, #56]	@ (8000c04 <HAL_TIM_MspPostInit+0x84>)
 8000bcc:	f000 f9ee 	bl	8000fac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <HAL_TIM_MspPostInit+0x88>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_TIM_MspPostInit+0x88>)
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40012c00 	.word	0x40012c00
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010c00 	.word	0x40010c00
 8000c08:	40010000 	.word	0x40010000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f882 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c68:	2020      	movs	r0, #32
 8000c6a:	f000 fb6b 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c6e:	2040      	movs	r0, #64	@ 0x40
 8000c70:	f000 fb68 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c74:	2080      	movs	r0, #128	@ 0x80
 8000c76:	f000 fb65 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff fff7 	bl	8000c7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c92:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c94:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ca8:	4c09      	ldr	r4, [pc, #36]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fa39 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff fbfb 	bl	80004b4 <main>
  bx lr
 8000cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000cc8:	0800320c 	.word	0x0800320c
  ldr r2, =_sbss
 8000ccc:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000cd0:	20000110 	.word	0x20000110

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x28>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x28>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f92b 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe80 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f935 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f90b 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000038 	.word	0x20000038
 8000d5c:	20000040 	.word	0x20000040
 8000d60:	2000003c 	.word	0x2000003c

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a03      	ldr	r2, [pc, #12]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	20000040 	.word	0x20000040
 8000d84:	2000010c 	.word	0x2000010c

08000d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	@ (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	2000010c 	.word	0x2000010c

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fff0 	bl	8000d88 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffe0 	bl	8000d88 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000040 	.word	0x20000040

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff90 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff49 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff90 	bl	8000e9c <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5f 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b08b      	sub	sp, #44	@ 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e169      	b.n	8001294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8158 	bne.w	800128e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4a9a      	ldr	r2, [pc, #616]	@ (800124c <HAL_GPIO_Init+0x2a0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d05e      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000fe8:	4a98      	ldr	r2, [pc, #608]	@ (800124c <HAL_GPIO_Init+0x2a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d875      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000fee:	4a98      	ldr	r2, [pc, #608]	@ (8001250 <HAL_GPIO_Init+0x2a4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d058      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a96      	ldr	r2, [pc, #600]	@ (8001250 <HAL_GPIO_Init+0x2a4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d86f      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000ffa:	4a96      	ldr	r2, [pc, #600]	@ (8001254 <HAL_GPIO_Init+0x2a8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d052      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001000:	4a94      	ldr	r2, [pc, #592]	@ (8001254 <HAL_GPIO_Init+0x2a8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d869      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001006:	4a94      	ldr	r2, [pc, #592]	@ (8001258 <HAL_GPIO_Init+0x2ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d04c      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 800100c:	4a92      	ldr	r2, [pc, #584]	@ (8001258 <HAL_GPIO_Init+0x2ac>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d863      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001012:	4a92      	ldr	r2, [pc, #584]	@ (800125c <HAL_GPIO_Init+0x2b0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d046      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001018:	4a90      	ldr	r2, [pc, #576]	@ (800125c <HAL_GPIO_Init+0x2b0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d85d      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d82a      	bhi.n	8001078 <HAL_GPIO_Init+0xcc>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d859      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <HAL_GPIO_Init+0x80>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	080010a7 	.word	0x080010a7
 8001030:	08001081 	.word	0x08001081
 8001034:	08001093 	.word	0x08001093
 8001038:	080010d5 	.word	0x080010d5
 800103c:	080010db 	.word	0x080010db
 8001040:	080010db 	.word	0x080010db
 8001044:	080010db 	.word	0x080010db
 8001048:	080010db 	.word	0x080010db
 800104c:	080010db 	.word	0x080010db
 8001050:	080010db 	.word	0x080010db
 8001054:	080010db 	.word	0x080010db
 8001058:	080010db 	.word	0x080010db
 800105c:	080010db 	.word	0x080010db
 8001060:	080010db 	.word	0x080010db
 8001064:	080010db 	.word	0x080010db
 8001068:	080010db 	.word	0x080010db
 800106c:	080010db 	.word	0x080010db
 8001070:	08001089 	.word	0x08001089
 8001074:	0800109d 	.word	0x0800109d
 8001078:	4a79      	ldr	r2, [pc, #484]	@ (8001260 <HAL_GPIO_Init+0x2b4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107e:	e02c      	b.n	80010da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e029      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	3304      	adds	r3, #4
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e024      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	3308      	adds	r3, #8
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e01f      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	330c      	adds	r3, #12
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e01a      	b.n	80010dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ae:	2304      	movs	r3, #4
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e013      	b.n	80010dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	611a      	str	r2, [r3, #16]
          break;
 80010c6:	e009      	b.n	80010dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	615a      	str	r2, [r3, #20]
          break;
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x130>
          break;
 80010da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	@ 0xff
 80010e0:	d801      	bhi.n	80010e6 <HAL_GPIO_Init+0x13a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_Init+0x13e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	@ 0xff
 80010f0:	d802      	bhi.n	80010f8 <HAL_GPIO_Init+0x14c>
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x152>
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	3b08      	subs	r3, #8
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	210f      	movs	r1, #15
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	6a39      	ldr	r1, [r7, #32]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80b1 	beq.w	800128e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800112c:	4b4d      	ldr	r3, [pc, #308]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a4c      	ldr	r2, [pc, #304]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b4a      	ldr	r3, [pc, #296]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001144:	4a48      	ldr	r2, [pc, #288]	@ (8001268 <HAL_GPIO_Init+0x2bc>)
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a40      	ldr	r2, [pc, #256]	@ (800126c <HAL_GPIO_Init+0x2c0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_GPIO_Init+0x1ec>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3f      	ldr	r2, [pc, #252]	@ (8001270 <HAL_GPIO_Init+0x2c4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00d      	beq.n	8001194 <HAL_GPIO_Init+0x1e8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a3e      	ldr	r2, [pc, #248]	@ (8001274 <HAL_GPIO_Init+0x2c8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d007      	beq.n	8001190 <HAL_GPIO_Init+0x1e4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3d      	ldr	r2, [pc, #244]	@ (8001278 <HAL_GPIO_Init+0x2cc>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_GPIO_Init+0x1e0>
 8001188:	2303      	movs	r3, #3
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 800118c:	2304      	movs	r3, #4
 800118e:	e004      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001190:	2302      	movs	r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_GPIO_Init+0x1ee>
 8001198:	2300      	movs	r3, #0
 800119a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800119c:	f002 0203 	and.w	r2, r2, #3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4093      	lsls	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011aa:	492f      	ldr	r1, [pc, #188]	@ (8001268 <HAL_GPIO_Init+0x2bc>)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	492c      	ldr	r1, [pc, #176]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	4928      	ldr	r1, [pc, #160]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	4922      	ldr	r1, [pc, #136]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60cb      	str	r3, [r1, #12]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	491e      	ldr	r1, [pc, #120]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 8001204:	4013      	ands	r3, r2
 8001206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4918      	ldr	r1, [pc, #96]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4914      	ldr	r1, [pc, #80]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 800122c:	4013      	ands	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d021      	beq.n	8001280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	490e      	ldr	r1, [pc, #56]	@ (800127c <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e021      	b.n	800128e <HAL_GPIO_Init+0x2e2>
 800124a:	bf00      	nop
 800124c:	10320000 	.word	0x10320000
 8001250:	10310000 	.word	0x10310000
 8001254:	10220000 	.word	0x10220000
 8001258:	10210000 	.word	0x10210000
 800125c:	10120000 	.word	0x10120000
 8001260:	10110000 	.word	0x10110000
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010c00 	.word	0x40010c00
 8001274:	40011000 	.word	0x40011000
 8001278:	40011400 	.word	0x40011400
 800127c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	43db      	mvns	r3, r3
 8001288:	4909      	ldr	r1, [pc, #36]	@ (80012b0 <HAL_GPIO_Init+0x304>)
 800128a:	4013      	ands	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	3301      	adds	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f47f ae8e 	bne.w	8000fc0 <HAL_GPIO_Init+0x14>
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	372c      	adds	r7, #44	@ 0x2c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f2:	787b      	ldrb	r3, [r7, #1]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	041a      	lsls	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43d9      	mvns	r1, r3
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	400b      	ands	r3, r1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f806 	bl	8001374 <HAL_GPIO_EXTI_Callback>
  }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e12b      	b.n	80015f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fb54 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2224      	movs	r2, #36	@ 0x24
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ec:	f001 f832 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 80013f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a81      	ldr	r2, [pc, #516]	@ (80015fc <HAL_I2C_Init+0x274>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d807      	bhi.n	800140c <HAL_I2C_Init+0x84>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a80      	ldr	r2, [pc, #512]	@ (8001600 <HAL_I2C_Init+0x278>)
 8001400:	4293      	cmp	r3, r2
 8001402:	bf94      	ite	ls
 8001404:	2301      	movls	r3, #1
 8001406:	2300      	movhi	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	e006      	b.n	800141a <HAL_I2C_Init+0x92>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4a7d      	ldr	r2, [pc, #500]	@ (8001604 <HAL_I2C_Init+0x27c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	bf94      	ite	ls
 8001414:	2301      	movls	r3, #1
 8001416:	2300      	movhi	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e7      	b.n	80015f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a78      	ldr	r2, [pc, #480]	@ (8001608 <HAL_I2C_Init+0x280>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a6a      	ldr	r2, [pc, #424]	@ (80015fc <HAL_I2C_Init+0x274>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d802      	bhi.n	800145c <HAL_I2C_Init+0xd4>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	e009      	b.n	8001470 <HAL_I2C_Init+0xe8>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	4a69      	ldr	r2, [pc, #420]	@ (800160c <HAL_I2C_Init+0x284>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	3301      	adds	r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	430b      	orrs	r3, r1
 8001476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001482:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	495c      	ldr	r1, [pc, #368]	@ (80015fc <HAL_I2C_Init+0x274>)
 800148c:	428b      	cmp	r3, r1
 800148e:	d819      	bhi.n	80014c4 <HAL_I2C_Init+0x13c>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1e59      	subs	r1, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fbb1 f3f3 	udiv	r3, r1, r3
 800149e:	1c59      	adds	r1, r3, #1
 80014a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014a4:	400b      	ands	r3, r1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00a      	beq.n	80014c0 <HAL_I2C_Init+0x138>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1e59      	subs	r1, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014be:	e051      	b.n	8001564 <HAL_I2C_Init+0x1dc>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e04f      	b.n	8001564 <HAL_I2C_Init+0x1dc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_I2C_Init+0x168>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	e012      	b.n	8001516 <HAL_I2C_Init+0x18e>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x196>
 800151a:	2301      	movs	r3, #1
 800151c:	e022      	b.n	8001564 <HAL_I2C_Init+0x1dc>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <HAL_I2C_Init+0x1bc>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	fbb0 f3f3 	udiv	r3, r0, r3
 8001538:	3301      	adds	r3, #1
 800153a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001542:	e00f      	b.n	8001564 <HAL_I2C_Init+0x1dc>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	6809      	ldr	r1, [r1, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001592:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6911      	ldr	r1, [r2, #16]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68d2      	ldr	r2, [r2, #12]
 800159e:	4311      	orrs	r1, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	001e847f 	.word	0x001e847f
 8001604:	003d08ff 	.word	0x003d08ff
 8001608:	431bde83 	.word	0x431bde83
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	460b      	mov	r3, r1
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	4613      	mov	r3, r2
 8001622:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fbb0 	bl	8000d88 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	f040 80e0 	bne.w	80017f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	4970      	ldr	r1, [pc, #448]	@ (8001804 <HAL_I2C_Master_Transmit+0x1f4>)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f964 	bl	8001910 <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
 8001650:	e0d3      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_I2C_Master_Transmit+0x50>
 800165c:	2302      	movs	r3, #2
 800165e:	e0cc      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001694:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2221      	movs	r2, #33	@ 0x21
 800169a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2210      	movs	r2, #16
 80016a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	893a      	ldrh	r2, [r7, #8]
 80016b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a50      	ldr	r2, [pc, #320]	@ (8001808 <HAL_I2C_Master_Transmit+0x1f8>)
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f89c 	bl	800180c <I2C_MasterRequestWrite>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e08d      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016f4:	e066      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fa22 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	2b04      	cmp	r3, #4
 800170c:	d107      	bne.n	800171e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800171c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	d11b      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x188>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d017      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	6a39      	ldr	r1, [r7, #32]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fa19 	bl	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e01a      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d194      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00100002 	.word	0x00100002
 8001808:	ffff0000 	.word	0xffff0000

0800180c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d006      	beq.n	8001836 <I2C_MasterRequestWrite+0x2a>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d003      	beq.n	8001836 <I2C_MasterRequestWrite+0x2a>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001834:	d108      	bne.n	8001848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e00b      	b.n	8001860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	2b12      	cmp	r3, #18
 800184e:	d107      	bne.n	8001860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800185e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f84f 	bl	8001910 <I2C_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001886:	d103      	bne.n	8001890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e035      	b.n	8001900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800189c:	d108      	bne.n	80018b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	e01b      	b.n	80018e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018b0:	897b      	ldrh	r3, [r7, #10]
 80018b2:	11db      	asrs	r3, r3, #7
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f003 0306 	and.w	r3, r3, #6
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f063 030f 	orn	r3, r3, #15
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	490e      	ldr	r1, [pc, #56]	@ (8001908 <I2C_MasterRequestWrite+0xfc>)
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f898 	bl	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e010      	b.n	8001900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4907      	ldr	r1, [pc, #28]	@ (800190c <I2C_MasterRequestWrite+0x100>)
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f888 	bl	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	00010008 	.word	0x00010008
 800190c:	00010002 	.word	0x00010002

08001910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	4613      	mov	r3, r2
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001920:	e048      	b.n	80019b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d044      	beq.n	80019b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800192a:	f7ff fa2d 	bl	8000d88 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d302      	bcc.n	8001940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d139      	bne.n	80019b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10d      	bne.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x56>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	43da      	mvns	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4013      	ands	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	e00c      	b.n	8001980 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	43da      	mvns	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4013      	ands	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	429a      	cmp	r2, r3
 8001984:	d116      	bne.n	80019b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f043 0220 	orr.w	r2, r3, #32
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e023      	b.n	80019fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10d      	bne.n	80019da <I2C_WaitOnFlagUntilTimeout+0xca>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	43da      	mvns	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4013      	ands	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	e00c      	b.n	80019f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	43da      	mvns	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	4013      	ands	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d093      	beq.n	8001922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a12:	e071      	b.n	8001af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a22:	d123      	bne.n	8001a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e067      	b.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d041      	beq.n	8001af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a74:	f7ff f988 	bl	8000d88 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d302      	bcc.n	8001a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d136      	bne.n	8001af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d10c      	bne.n	8001aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	e00b      	b.n	8001ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e021      	b.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d10c      	bne.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e00b      	b.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4013      	ands	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f af6d 	bne.w	8001a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b50:	e034      	b.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f886 	bl	8001c64 <I2C_IsAcknowledgeFailed>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e034      	b.n	8001bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d028      	beq.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6a:	f7ff f90d 	bl	8000d88 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d11d      	bne.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8a:	2b80      	cmp	r3, #128	@ 0x80
 8001b8c:	d016      	beq.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e007      	b.n	8001bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	2b80      	cmp	r3, #128	@ 0x80
 8001bc8:	d1c3      	bne.n	8001b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001be0:	e034      	b.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f83e 	bl	8001c64 <I2C_IsAcknowledgeFailed>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e034      	b.n	8001c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d028      	beq.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfa:	f7ff f8c5 	bl	8000d88 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11d      	bne.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d016      	beq.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e007      	b.n	8001c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d1c3      	bne.n	8001be2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7a:	d11b      	bne.n	8001cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e272      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cec:	4b8f      	ldr	r3, [pc, #572]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d112      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d04:	d10b      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d06c      	beq.n	8001dec <HAL_RCC_OscConfig+0x12c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d168      	bne.n	8001dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e24c      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x76>
 8001d28:	4b80      	ldr	r3, [pc, #512]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e02e      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x98>
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7a      	ldr	r2, [pc, #488]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b78      	ldr	r3, [pc, #480]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a77      	ldr	r2, [pc, #476]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0xbc>
 8001d62:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a71      	ldr	r2, [pc, #452]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6a      	ldr	r2, [pc, #424]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b68      	ldr	r3, [pc, #416]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a67      	ldr	r2, [pc, #412]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fff4 	bl	8000d88 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7fe fff0 	bl	8000d88 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e200      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe4>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ffe0 	bl	8000d88 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ffdc 	bl	8000d88 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	@ 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1ec      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x10c>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d063      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e06:	4b49      	ldr	r3, [pc, #292]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
 8001e12:	4b46      	ldr	r3, [pc, #280]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1c0      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b3d      	ldr	r3, [pc, #244]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4939      	ldr	r1, [pc, #228]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b36      	ldr	r3, [pc, #216]	@ (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ff95 	bl	8000d88 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7fe ff91 	bl	8000d88 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1a1      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4927      	ldr	r1, [pc, #156]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ff74 	bl	8000d88 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7fe ff70 	bl	8000d88 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e180      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03a      	beq.n	8001f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7fe ff54 	bl	8000d88 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ff50 	bl	8000d88 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e160      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f000 faba 	bl	800247c <RCC_Delay>
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe ff3a 	bl	8000d88 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe ff36 	bl	8000d88 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d908      	bls.n	8001f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e146      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	42420000 	.word	0x42420000
 8001f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b92      	ldr	r3, [pc, #584]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e9      	bne.n	8001f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a6 	beq.w	800209e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b8b      	ldr	r3, [pc, #556]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a87      	ldr	r2, [pc, #540]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b85      	ldr	r3, [pc, #532]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b82      	ldr	r3, [pc, #520]	@ (8002188 <HAL_RCC_OscConfig+0x4c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x4c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x4c8>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fef7 	bl	8000d88 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe fef3 	bl	8000d88 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	@ 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e103      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_RCC_OscConfig+0x4c8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x312>
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e02d      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x334>
 8001fda:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a69      	ldr	r2, [pc, #420]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b67      	ldr	r3, [pc, #412]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a66      	ldr	r2, [pc, #408]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e01c      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x356>
 8001ffc:	4b61      	ldr	r3, [pc, #388]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a60      	ldr	r2, [pc, #384]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	4b5e      	ldr	r3, [pc, #376]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a5d      	ldr	r2, [pc, #372]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e00b      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8002016:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a5a      	ldr	r2, [pc, #360]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	4b58      	ldr	r3, [pc, #352]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d015      	beq.n	8002062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe fea7 	bl	8000d88 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fea3 	bl	8000d88 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0b1      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ee      	beq.n	800203e <HAL_RCC_OscConfig+0x37e>
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe fe91 	bl	8000d88 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fe8d 	bl	8000d88 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e09b      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002092:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a3b      	ldr	r2, [pc, #236]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d061      	beq.n	8002178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d146      	bne.n	800214a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b33      	ldr	r3, [pc, #204]	@ (800218c <HAL_RCC_OscConfig+0x4cc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fe61 	bl	8000d88 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7fe fe5d 	bl	8000d88 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e06d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f2:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4921      	ldr	r1, [pc, #132]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002104:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a19      	ldr	r1, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	430b      	orrs	r3, r1
 8002116:	491b      	ldr	r1, [pc, #108]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x4cc>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fe31 	bl	8000d88 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe fe2d 	bl	8000d88 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x46a>
 8002148:	e035      	b.n	80021b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <HAL_RCC_OscConfig+0x4cc>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fe1a 	bl	8000d88 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fe16 	bl	8000d88 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e026      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x498>
 8002176:	e01e      	b.n	80021b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e019      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_RCC_OscConfig+0x500>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0d0      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d910      	bls.n	8002208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b67      	ldr	r3, [pc, #412]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4965      	ldr	r1, [pc, #404]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a58      	ldr	r2, [pc, #352]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800222a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d040      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d115      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b41      	ldr	r3, [pc, #260]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e073      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3d      	ldr	r3, [pc, #244]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4936      	ldr	r1, [pc, #216]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7fe fd68 	bl	8000d88 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fe fd64 	bl	8000d88 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e053      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d210      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4922      	ldr	r1, [pc, #136]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490a      	ldr	r1, [pc, #40]	@ (800238c <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1cc>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x1d0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fcc6 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	080031d0 	.word	0x080031d0
 8002390:	20000038 	.word	0x20000038
 8002394:	2000003c 	.word	0x2000003c

08002398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_RCC_GetSysClockFreq+0x94>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x30>
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x36>
 80023c6:	e027      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	e027      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0c9b      	lsrs	r3, r3, #18
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_GetSysClockFreq+0x94>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0c5b      	lsrs	r3, r3, #17
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	fb03 f202 	mul.w	r2, r3, r2
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e004      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0c      	ldr	r2, [pc, #48]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa4>)
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	613b      	str	r3, [r7, #16]
      break;
 8002416:	e002      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	613b      	str	r3, [r7, #16]
      break;
 800241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241e:	693b      	ldr	r3, [r7, #16]
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	080031e8 	.word	0x080031e8
 8002438:	080031f8 	.word	0x080031f8
 800243c:	003d0900 	.word	0x003d0900

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <HAL_RCC_GetHCLKFreq+0x10>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	20000038 	.word	0x20000038

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff2 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	080031e0 	.word	0x080031e0

0800247c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <RCC_Delay+0x34>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <RCC_Delay+0x38>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a5b      	lsrs	r3, r3, #9
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002498:	bf00      	nop
  }
  while (Delay --);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	60fa      	str	r2, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <RCC_Delay+0x1c>
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000038 	.word	0x20000038
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e041      	b.n	800254e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fafa 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fab0 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e041      	b.n	80025ec <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f839 	bl	80025f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 fa61 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_TIM_PWM_Start+0x24>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e022      	b.n	8002672 <HAL_TIM_PWM_Start+0x6a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d109      	bne.n	8002646 <HAL_TIM_PWM_Start+0x3e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e015      	b.n	8002672 <HAL_TIM_PWM_Start+0x6a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d109      	bne.n	8002660 <HAL_TIM_PWM_Start+0x58>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e008      	b.n	8002672 <HAL_TIM_PWM_Start+0x6a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e05e      	b.n	8002738 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start+0x82>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002688:	e013      	b.n	80026b2 <HAL_TIM_PWM_Start+0xaa>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start+0x92>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002698:	e00b      	b.n	80026b2 <HAL_TIM_PWM_Start+0xaa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start+0xa2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026a8:	e003      	b.n	80026b2 <HAL_TIM_PWM_Start+0xaa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fc5a 	bl	8002f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002740 <HAL_TIM_PWM_Start+0x138>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d107      	bne.n	80026da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <HAL_TIM_PWM_Start+0x138>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00e      	beq.n	8002702 <HAL_TIM_PWM_Start+0xfa>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ec:	d009      	beq.n	8002702 <HAL_TIM_PWM_Start+0xfa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <HAL_TIM_PWM_Start+0x13c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <HAL_TIM_PWM_Start+0xfa>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <HAL_TIM_PWM_Start+0x140>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d010      	beq.n	8002736 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	e007      	b.n	8002736 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800

0800274c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc08 	bl	8002f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_TIM_PWM_Stop+0xc4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d117      	bne.n	800279e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_TIM_PWM_Stop+0x52>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	f240 4344 	movw	r3, #1092	@ 0x444
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_TIM_PWM_Stop+0x52>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_TIM_PWM_Stop+0x82>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	f240 4344 	movw	r3, #1092	@ 0x444
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_TIM_PWM_Stop+0x82>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Stop+0x92>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027dc:	e013      	b.n	8002806 <HAL_TIM_PWM_Stop+0xba>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Stop+0xa2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ec:	e00b      	b.n	8002806 <HAL_TIM_PWM_Stop+0xba>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Stop+0xb2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027fc:	e003      	b.n	8002806 <HAL_TIM_PWM_Stop+0xba>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40012c00 	.word	0x40012c00

08002814 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_TIM_OC_ConfigChannel+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e048      	b.n	80028c4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d839      	bhi.n	80028b4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002840:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	0800287d 	.word	0x0800287d
 800284c:	080028b5 	.word	0x080028b5
 8002850:	080028b5 	.word	0x080028b5
 8002854:	080028b5 	.word	0x080028b5
 8002858:	0800288b 	.word	0x0800288b
 800285c:	080028b5 	.word	0x080028b5
 8002860:	080028b5 	.word	0x080028b5
 8002864:	080028b5 	.word	0x080028b5
 8002868:	08002899 	.word	0x08002899
 800286c:	080028b5 	.word	0x080028b5
 8002870:	080028b5 	.word	0x080028b5
 8002874:	080028b5 	.word	0x080028b5
 8002878:	080028a7 	.word	0x080028a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f958 	bl	8002b38 <TIM_OC1_SetConfig>
      break;
 8002888:	e017      	b.n	80028ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f9b7 	bl	8002c04 <TIM_OC2_SetConfig>
      break;
 8002896:	e010      	b.n	80028ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fa1a 	bl	8002cd8 <TIM_OC3_SetConfig>
      break;
 80028a4:	e009      	b.n	80028ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa7d 	bl	8002dac <TIM_OC4_SetConfig>
      break;
 80028b2:	e002      	b.n	80028ba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
      break;
 80028b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0b4      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x186>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800290e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002920:	d03e      	beq.n	80029a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002926:	f200 8087 	bhi.w	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292e:	f000 8086 	beq.w	8002a3e <HAL_TIM_ConfigClockSource+0x172>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002936:	d87f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b70      	cmp	r3, #112	@ 0x70
 800293a:	d01a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xa6>
 800293c:	2b70      	cmp	r3, #112	@ 0x70
 800293e:	d87b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b60      	cmp	r3, #96	@ 0x60
 8002942:	d050      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002944:	2b60      	cmp	r3, #96	@ 0x60
 8002946:	d877      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b50      	cmp	r3, #80	@ 0x50
 800294a:	d03c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xfa>
 800294c:	2b50      	cmp	r3, #80	@ 0x50
 800294e:	d873      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b40      	cmp	r3, #64	@ 0x40
 8002952:	d058      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x13a>
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	d86f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b30      	cmp	r3, #48	@ 0x30
 800295a:	d064      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b30      	cmp	r3, #48	@ 0x30
 800295e:	d86b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b20      	cmp	r3, #32
 8002962:	d060      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d867      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05c      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b10      	cmp	r3, #16
 800296e:	d05a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	e062      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002982:	f000 fad8 	bl	8002f36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	609a      	str	r2, [r3, #8]
      break;
 800299e:	e04f      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	f000 fac1 	bl	8002f36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c2:	609a      	str	r2, [r3, #8]
      break;
 80029c4:	e03c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 fa38 	bl	8002e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2150      	movs	r1, #80	@ 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fa8f 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 80029e4:	e02c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 fa56 	bl	8002ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2160      	movs	r1, #96	@ 0x60
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fa7f 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e01c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 fa18 	bl	8002e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2140      	movs	r1, #64	@ 0x40
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa6f 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e00c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 fa66 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e000      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <TIM_Base_SetConfig+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <TIM_Base_SetConfig+0x30>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7a:	d007      	beq.n	8002a8c <TIM_Base_SetConfig+0x30>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b30 <TIM_Base_SetConfig+0xd4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_Base_SetConfig+0x30>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a2b      	ldr	r2, [pc, #172]	@ (8002b34 <TIM_Base_SetConfig+0xd8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d108      	bne.n	8002a9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <TIM_Base_SetConfig+0xd0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00b      	beq.n	8002abe <TIM_Base_SetConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aac:	d007      	beq.n	8002abe <TIM_Base_SetConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <TIM_Base_SetConfig+0xd4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d003      	beq.n	8002abe <TIM_Base_SetConfig+0x62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <TIM_Base_SetConfig+0xd8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d108      	bne.n	8002ad0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <TIM_Base_SetConfig+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d103      	bne.n	8002b04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f023 0201 	bic.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	611a      	str	r2, [r3, #16]
  }
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800

08002b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f023 0201 	bic.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <TIM_OC1_SetConfig+0xc8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10c      	bne.n	8002bae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0308 	bic.w	r3, r3, #8
 8002b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <TIM_OC1_SetConfig+0xc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40012c00 	.word	0x40012c00

08002c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 0320 	bic.w	r3, r3, #32
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <TIM_OC2_SetConfig+0xd0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10d      	bne.n	8002c80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <TIM_OC2_SetConfig+0xd0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d113      	bne.n	8002cb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40012c00 	.word	0x40012c00

08002cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <TIM_OC3_SetConfig+0xd0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10d      	bne.n	8002d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a14      	ldr	r2, [pc, #80]	@ (8002da8 <TIM_OC3_SetConfig+0xd0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	031b      	lsls	r3, r3, #12
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0f      	ldr	r2, [pc, #60]	@ (8002e44 <TIM_OC4_SetConfig+0x98>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d109      	bne.n	8002e20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0201 	bic.w	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 030a 	bic.w	r3, r3, #10
 8002e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0210 	bic.w	r2, r3, #16
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	031b      	lsls	r3, r3, #12
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	621a      	str	r2, [r3, #32]
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f043 0307 	orr.w	r3, r3, #7
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	021a      	lsls	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e046      	b.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a16      	ldr	r2, [pc, #88]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003020:	d009      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800

08003078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e03d      	b.n	8003110 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <memset>:
 800311a:	4603      	mov	r3, r0
 800311c:	4402      	add	r2, r0
 800311e:	4293      	cmp	r3, r2
 8003120:	d100      	bne.n	8003124 <memset+0xa>
 8003122:	4770      	bx	lr
 8003124:	f803 1b01 	strb.w	r1, [r3], #1
 8003128:	e7f9      	b.n	800311e <memset+0x4>
	...

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	2600      	movs	r6, #0
 8003130:	4d0c      	ldr	r5, [pc, #48]	@ (8003164 <__libc_init_array+0x38>)
 8003132:	4c0d      	ldr	r4, [pc, #52]	@ (8003168 <__libc_init_array+0x3c>)
 8003134:	1b64      	subs	r4, r4, r5
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	f000 f81a 	bl	8003174 <_init>
 8003140:	2600      	movs	r6, #0
 8003142:	4d0a      	ldr	r5, [pc, #40]	@ (800316c <__libc_init_array+0x40>)
 8003144:	4c0a      	ldr	r4, [pc, #40]	@ (8003170 <__libc_init_array+0x44>)
 8003146:	1b64      	subs	r4, r4, r5
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003204 	.word	0x08003204
 8003168:	08003204 	.word	0x08003204
 800316c:	08003204 	.word	0x08003204
 8003170:	08003208 	.word	0x08003208

08003174 <_init>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr

08003180 <_fini>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr
